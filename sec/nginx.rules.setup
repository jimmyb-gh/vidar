#
#  NOTE FOR ALL RULES:
#  THE ONLY THING SEC SHOULD WRITE TO STDOUT IS AN IP ADDRESS.
#  WRITE TO FILES FOR EVERYTHING ELSE.
#
# Fri Jun 20 23:22:33 EDT 2025
#
# Rules to manage /var/log/nginx/access.log
# Rules 1 - 100: Allow Patterns.  Whitelisted.
#
# RULE 1000: Disallow null HTTP request. \
#      One strike and you're out.
#
# Rule 1005: Allow only valid HTTP/1.1 and HTTP/2 methods (according to ChatGPT) \
#      This pattern says: "if it's not on this list, block it.
#
# Rule 1010: Check return status: E400 - bad request \
#      One strike and you're out.
#
# Rule 1013: Check return status: Invalid DNS over HTTP requests.  \
#      One strike and you're out.
#
# Rule 1015: Root parameter seekers. \
#      Three strikes and you're out.
#
# Rule 1020: Allow multiple E404 errors.
#
# RULE 1025: Check return status: Too many 4xx errors, but not E404 handled by Rule 1020. \
#    SingleWithThreshold - 4xx X 5 within 120 seconds  
#
# Rule 1030: Check return status: Too many redirects \
#      SingleWithThreshold - 301 x 5 within 300 seconds 
#
# Rule 9999: Cleanup rule. \
#      Anything not handled goes into NOT_MATCHED_NGINX.TXT 
#
#
#####################################  WHITELIST  ##################################### 


#NOTE: This rule allows "GET / " up to 10 times in 60 seconds.
type=SingleWithThreshold
rem=RULE 8: Too many "GET / " requests.  \
    SingleWithThreshold - 200 X 10 within 60 seconds  
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"GET /\s+[^"]+" (200) [0-9]+.*
desc=too many "GET / " requests from $1
context=NGINX
thresh=10
window=60
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_8; \
       write - $1; \
       reset 0


type = Single
rem = RULE 10: Allow Pattern. \
      See pseudocode above. We don't care about the IP, just allow this line. \
      Try matching several at a time. Saves time.
ptype = RegExp
pattern =^(.*?)\"GET (/bsds|/tmp/hosting_providers|/SEC\-examples|/contact|/css/crab\.css|/img/logo\.png|/tags|/jeroen|/fbsd/ipfw|/\.well\-known)[^"]+
desc = echo input line
context = NGINX
action = write @@@LOGS@@@/ALLOW.TXT $0 NGINX_10; \


type = Single
rem = RULE 15: Allow Pattern. \
      See pseudocode above. We don't care about the IP, just allow this line. \
      Try matching several at a time. Saves time.
ptype = RegExp
pattern =^(.*?)\"GET (/vids|/fbsd/workflow|/bsdov|/techbits|/blog|/tmpchb|/fbsd_docs|/robots\.txt|/bsds/img/trueos\.png|/favicon\.ico|/favicon\.png|/favicon\.gif|/favicon\.svg|/icons/favicon\.ico|/images/favicon\.ico)[^"]+
desc = echo input line
context = NGINX
action = write @@@LOGS@@@/ALLOW.TXT $0 NGINX_15; \


type = Single
rem = RULE 20: Allow Pattern. \
      See pseudocode above. We don't care about the IP, just allow this line. \
      Try matching several at a time. Saves time.
ptype = RegExp
pattern =^(.*?)\"GET (/static/favicon\.ico|/favicon\-16x16\.png|/favicon\-32x32\.png|/apple\-touch\-icon\.png|/android\-chrome\-192x192\.png|/browserconfig\.xml|/apple\-touch\-icon\-precomposed\.png)[^"]+
desc = echo input line
context = NGINX
action = write @@@LOGS@@@/ALLOW.TXT $0 NGINX_20; \

#####################################  END WHITELIST  ##################################### 


type = Single
rem = RULE 1000: Disallow null HTTP request. \
      One strike and you're out.
ptype = RegExp
pattern =^(.*?) \- \- \[(.*?)\] \"\" (400).*
desc = null HTTP request from $1
context = NGINX
action = write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1000; \
         write - $1


type = Single
rem = RULE 1005: Allow only valid HTTP/1.1 and HTTP/2 methods (according to ChatGPT) \
      This pattern says: "if it's not on this list, block it.
ptype = RegExp
pattern =^(.*?) \- \- \[(.*?)\] \"(?!GET|POST|HEAD|OPTIONS|PUT|PATCH)[^"]+
desc = invalid HTTP verbs
context = NGINX
action = write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1005; \
         write - $1


type=Single
rem=RULE 1010: Check return status: E400 - bad request \
    One strike and you're out.
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"(GET|POST|HEAD) [^"]+" (400) [0-9]+.*
desc=malformed request $3, immediate block of $1
context=NGINX
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1010; \
       write - $1


type=Single
rem=RULE 1013: Check return status: Invalid DNS over HTTP requests.  \
    One strike and you're out.
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"GET /(\?dns=[^"]+"|\?name=[^"]+") (200).*
desc=malformed request $3, immediate block of $1
context=NGINX
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1010; \
       write - $1


# Other root parameter seekers.  
type=SingleWithThreshold
rem=RULE 1015: Root parameter seekers. \
    Three strikes and you're out.
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"GET /(\?\S+[^"]+"|\?\s+[^"]+") (200).*
desc=root parameter probes of $3 immediate block of $1
context=NGINX
thresh=3
window=600
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1015; \
       write - $1; \
       reset 0


type=SingleWithThreshold
rem=RULE 1020: Allow multiple E404 errors. \
    Five strikes in 300 seconds and you're out.
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"(GET|HEAD) [^"]+" 404 [0-9]+.*
desc=too many E404 messages to pass.
context=NGINX
thresh=5
window=180
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1020; \
       write - $1; \
       reset 0


type=SingleWithThreshold
rem=RULE 1025: Check return status: Too many 4xx errors, but not E404 handled by Rule 1020. \
    SingleWithThreshold - 4xx X 5 within 120 seconds  
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"(GET|HEAD|POST|OPTIONS|PUT|PATCH) [^"]+" (4\d+) [0-9]+.*
desc=too many $4 errors of type $3 from $1
context=NGINX
thresh=5
window=120
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1025; \
       write - $1; \
       reset 0


type=SingleWithThreshold
rem=RULE 1030: Check return status: Too many redirects.  These can happen when http://www.jimby.name is used. \
    Nginx has a redirect in place to point to https://www.jimby.name. \
    SingleWithThreshold - 301 x 50 within 300 seconds
ptype=RegExp
pattern=^(.*?) \- \S+ \[(.*?)\] \"(GET|HEAD|POST|OPTIONS|PUT|PATCH) [^"]+" (3\d+) [0-9]+.*
desc=too many $4 redirects of type $3 from $1
context=NGINX
thresh=50
window=300
action=write @@@LOGS@@@/BLOCKED_NGINX.TXT $0 NGINX_1030; \
       write - $1; \
       reset 0


##########################################################################################################

      
# Health Check Rule 
type=Single
rem=Rule 9998: Health check rule.  Announce our good health if we get this notice in our input file.
ptype=RegExp
pattern=NGINX_HEALTH_CHECK
desc=NGINX_HEALTH_CHECK_RECEIVED 
context=NGINX
action=write @@@LOGS@@@/sec.out %t [%s] [NGINX_9998]


#
# At this point in the ruleset, everything we *should* block *should*  already be blocked.
#
# Keep track of things we missed.

type = Single
rem = RULE 9999: Cleanup rule. \
      Anything not handled goes into NOT_MATCHED_NGINX.TXT 
ptype = RegExp
pattern =.
desc = cleanup rule
context = NGINX
action = write @@@LOGS@@@/NOT_MATCHED_NGINX.TXT $0 NGINX_9999


